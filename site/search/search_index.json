{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#welcome-to-rinprodcom","title":"Welcome to RinProd.com","text":"<p>Learn about running R in production.</p> <p>Important note</p> <p>This site is an early stage work in progress, with work happening in public.</p> <p>Content is currently extremeley sparse, but if there's something you'd like to know about, please raise an issue.</p> <p>If you're an R user looking for more information on writing R for production use cases, this site isn't really about that, so check the resources for writing production R page instead. Having said that, if you're interested in writing code for certain use-cases, such as CI/CD or HPC, have a look around, there may be something here you find useful.</p>"},{"location":"#understanding-r-and-its-ecosystem","title":"Understanding R and its ecosystem","text":"<p>The best place to start your journey towards understanding the world of R is the Field Guide to the R Ecosystem. It's a concise, non-technical introduction to the language and supporting software. The guide presumes no previous knowledge of R or any other programming language and is aimed primarily at managers and IT professionals approaching the language for the first time.</p> <p>If you're just starting to learn about R, read the field guide first, then come back here for a deeper dive.</p>"},{"location":"#ready-to-learn-more","title":"Ready to learn more?","text":"<p>If you're ready to learn more about the concepts that make running R in production a breeze, explore the \"Learn\" menu above.</p>"},{"location":"about/","title":"About","text":"<p>RinProd.com is not your standard R website or blog. This website isn\u2019t really even aimed at R users (there are lots of better sites for that audience) but rather the IT and Ops professionals tasked with building and maintaining R based infrastructure.</p> <p>The goal of the project is to provide that audience with the information they need to expand the analytics capability that they\u2019re able to offer for their businesses.</p> <p>If you find a problem with this site, or think that something is missing, let us know by raising an issue.</p> <p>This work is licensed under a Creative Commons Attribution 4.0 International License.</p> <p>RinProd.com was created by Mark Sellors. Mark has been helping data scientists and ops team productionise their R and Python usage since 2013 and he's been helping smart people do cool things with computers for a lot longer.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#2024-06-09-mark-sellors","title":"2024-06-09 Mark Sellors","text":"<ul> <li>Ported site to mkdocs and started to fill out the content</li> <li>Site is still very much a work in progress</li> </ul>"},{"location":"resources/","title":"Other resources","text":"<p>Hopefully you've realised by this point that this site isn't so much about R as it is the R ecosystem and infrastructure around R. So it's not the best place for information on writing production R. If that's what you're interested in though, the broader R community has you covered.</p> <p>Here are some links to the best resources for writing better R code:</p>"},{"location":"resources/#absolute-beginners","title":"Absolute beginners","text":"<ul> <li>Field Guide to the R Ecosystem: a short guide for those new to the R ecosystem and targeted specifically at Ops teams and managers.</li> </ul>"},{"location":"resources/#starting-out","title":"Starting out","text":"<ul> <li>Garrett Grolemund and Hadley Wickham's \"R for Data Science\" is a very popular text for new users. It's so popular in fact that it's spawned it's own R for Data Science Online Learning Community of learners and mentors helping newcomers with the language and working on problems together.</li> </ul>"},{"location":"resources/#version-control","title":"Version Control","text":"<ul> <li>Jenny Bryan and team's \"Happy git with R\" is a fantastic starting point for using git (and specifically GitHub.com) for version control.</li> </ul>"},{"location":"resources/#more-advanced-users","title":"More advanced users","text":"<ul> <li>The \"Efficient R Programming\" book, by Colin Gillespie and Robin Lovelace is an excellent resource for squeezing maximum performance from the language.</li> <li>Hadley Wickham's \"Advanced R\", is hugely well regarded exploration of some more advanced topics.</li> </ul>"},{"location":"resources/#shiny","title":"Shiny","text":"<ul> <li>Shiny in production (Kelly O'Briant and Sean Lopp): a supplement to the 'Shiny in Production' 2 day workshop delivered at RStudio::conf 2019.</li> </ul>"},{"location":"resources/#other-resources","title":"Other resources","text":"<p>If you'd like to suggest other useful resources, please raise an issue in this site's GitHub repo.</p>"},{"location":"writing-production-r/","title":"Writing Production R","text":"<p>Hopefully you've realised by this point that this site isn't so much about R as it is the R ecosystem and infrastructure around R. So it's not the best place for information on writing production R. If that's what you're interested in though, the broader R community has you covered.</p> <p>Here are some links to the best resources for writing better R code:</p>"},{"location":"writing-production-r/#absolute-beginners","title":"Absolute beginners","text":"<ul> <li>Field Guide to the R Ecosystem: a short guide for those new to the R ecosystem and targeted specifically at Ops teams and managers.</li> </ul>"},{"location":"writing-production-r/#starting-out","title":"Starting out","text":"<ul> <li>Garrett Grolemund and Hadley Wickham's \"R for Data Science\" is a very popular text for new users. It's so popular in fact that it's spawned it's own R for Data Science Online Learning Community of learners and mentors helping newcomers with the language and working on problems together.</li> </ul>"},{"location":"writing-production-r/#version-control","title":"Version Control","text":"<ul> <li>Jenny Bryan and team's \"Happy git with R\" is a fantastic starting point for using git (and specifically GitHub.com) for version control.</li> </ul>"},{"location":"writing-production-r/#more-advanced-users","title":"More advanced users","text":"<ul> <li>The \"Efficient R Programming\" book, by Colin Gillespie and Robin Lovelace is an excellent resource for squeezing maximum performance from the language.</li> <li>Hadley Wickham's \"Advanced R\", is hugely well regarded exploration of some more advanced topics.</li> </ul>"},{"location":"writing-production-r/#shiny","title":"Shiny","text":"<ul> <li>Shiny in production (Kelly O'Briant and Sean Lopp): a supplement to the 'Shiny in Production' 2 day workshop delivered at RStudio::conf 2019.</li> </ul>"},{"location":"writing-production-r/#other-resources","title":"Other resources","text":"<p>If you'd like to suggest other useful resources, please raise an issue in this site's GitHub repo.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/the-talk-that-started-it-all/","title":"The talk that started it all","text":"<p>These slides were originally presented to an audience of R users by Mark Sellors at RStudio::conf 2019 in Austin, Texas.</p> <p>A video of the talk is available on the RStudio website.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-1","title":"Slide 1","text":"<p>In this talk we'll look at some techniques for getting R running in production in your company.</p> <p>Many R users find it difficult to get R outside of the data science bubble and into wider use within the business. Often, this is attributed to unhelpful IT departments, unwilling to adopt new approaches or methods. Whilst this perception is common, the reality is often that IT departments are not familiar with R and rarely have the bandwidth (or budget) to learn more about it.</p> <p>In the slides that follow, we'll take a look at the two main approaches that people use to successfully get R in production and begin deliver the benefits of R to the wider business.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-2-3","title":"Slide 2 &amp; 3","text":"<p>There's no magic formula to running any language in production and R is no different. You won't find any weird tricks or any magic functions in this talk.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-4","title":"Slide 4","text":"<p>Our starting position is that all of the technical barriers to running R in production are (comparatively) easy to overcome, but that it's the cultural issues that slow us down. It's these cultural barriers we're going to focus on here.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-6","title":"Slide 6","text":"<p>What is production anyway?</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-7","title":"Slide 7","text":"<p>This is the sort of image that people will often think of when the word \"production\" is used. Large scale data centres running huge systems, but is that \"scale\" more than it is \"production\"?</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-8-9","title":"Slide 8 &amp; 9","text":"<p>Production is anything that is run repeatedly (or continuously) and is relied upon. Acknowledging this is the key to running any language in production. For those of us working on data products \"relied upon\" generally means that the outputs are used in a decision making process somewhere. Production systems can be relied upon by thousands of people, or a single person the scale is not important.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-10","title":"Slide 10","text":"<p>R is a great language to run in production. It's mature, stable, has many existing production users, an extensive package ecosystem and it's essentially become the lingua franca of data.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-11-12","title":"Slide 11 &amp; 12","text":"<p>So, how do we get there? There are two main techniques that I've seen people use and I refer to these as the left-hand and right-hand paths.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-13-14","title":"Slide 13 &amp; 14","text":"<p>The left hand path is the path of magic.</p> <p>This simple technique works well, but can backfire. The basic goal is to impress a decision maker higher up in the organisation who can exert downward pressure on the business in general and the IT team in particular. If you can impress this person enough they'll push through your project to allow you to run R in production.</p> <p>The main issue with this approach is that it's quite confrontational and is unlikely to make you any friends. That said, there are many examples of it working well and enabling the business to take this important step.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-15-16","title":"Slide 15 &amp; 16","text":"<p>The other option is the right hand path.</p> <p>This approach directly addresses the elephant in the room, getting R past your IT team and into production.</p> <p>The first thing we need to do here is clear up this IT-team-as-the-enemy trope. In the vast majority of large organisations the IT team exists purely to enact the technical will of the business and the way it works is an expression of that will. In general IT teams are intentionally slow to change and risk-averse. As the gatekeepers of an organisation's infrastructure the IT team -- or ops, or devops or whatever they're called in your business -- have the ultimate responsibility for the security of the business's information. As a consequence they have a natural tendency towards conservatism when it comes to the infrastructure that they're responsible for.</p> <p>This responsibility often puts them at odds with the goals of a data scientist, which is generally to access and leverage data. Given these conflicting priorities it is unsurprising that there is sometimes friction between these groups.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-17","title":"Slide 17","text":"<p>Data science and software engineering aren't the same thing, though there is significant overlap.</p> <p>In well run data science teams I don't usually expect to see much more than code reviews and methodological reviews - we must be sure the code does what we think it does and that the statistical methodologies used are appropriate for the task at hand.</p> <p>Enterprise scale software engineering teams however, generally have many more hoops to jump through in their work and it is often siloed into very narrow bands to facilitate hand-offs between each activity. For example, a developer may be able to run automated and unit tests themselves but their code will often go to a specific test team for further testing, such as User Acceptance Testing or UAT, before passing on to the next stage in the release process. This release process tends towards the lengthy and extremely rigourous. In some organisations the length of time it will take to release even a simple application to their production environment is so long that even the thought of bringing in anything new can be extremely problematic.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-18","title":"Slide 18","text":"<p>These are just a few of the things you might need to get your head around when working to get R into a production setting.</p> <p>To be clear, I'm not suggesting that all data scientists need to learn this stuff. For many there will be no need and for many others no interest - and that's absolutely fine - what we're talking about here is building a deeper understand of a different area of the business that you might have to work with. In some organisations this role can be taken on by specialist \"R Admins\" who understand the work of the IT team and the data science team and can act as a facilitator between the two.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-19","title":"Slide 19","text":"<p>Unless you work in a very small company, you'll likely have to build bridges with other teams in order to land your work with R in production. Get to know these people and what drives them. There's often more common ground than you might think. At the end of the day getting R into production is about ensuring confidence in your work and building bridges with other teams within the organisation.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-20","title":"Slide 20","text":"<p>Use this checklist as the basis for your own on what needs to be considered to get your work into production.</p> <p>One of my favourites from this list is \"Support\": Who will provide support to your application once it goes live? Do you want to receive support calls at 3am if something breaks or does someone else need to be trained up for that role?</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-21-22","title":"Slide 21 &amp; 22","text":"<p>If you can negotiate all of that and help the business to gain the confidence in your work that it needs you'll make it to production - congratulations!</p> <p>And if you do make it to production please share your experiences - production stories will help us all to raise our game and demonstrate the validity and utility of running R in production.</p>"},{"location":"blog/the-talk-that-started-it-all/#slide-23","title":"Slide 23","text":"<ul> <li>Field Guide to the R Ecosystem: a guide for those new to the R ecosystem and targeted specifically at Ops teams and managers</li> <li>Shiny in production (Kelly O'Briant and Sean Lopp): a supplement to the 'Shiny in Production' 2 day workshop delivered at RStudio::conf 2019</li> <li>Companies using R (Colin Fay/ThinkR): a great resource to see what others are already doing with R from ThinkR</li> </ul>"},{"location":"learn/","title":"Architecture concepts","text":"<p>There are several key components to consider when planning R based environments:</p> <ul> <li>Code development</li> <li>Content publishing</li> <li>Unattended code execution</li> <li>Extension package management</li> </ul> <p>Not all of these elements needs to be considered in every deployment, but it's useful to understand them all so that informed decisions can be made.</p>"},{"location":"learn/#code-development","title":"code development","text":"<p>This is where developers or data scientists (effectively anyone who writes R code) will do their work. Since all you really need to write R code is a plain-text editor this could be more-or-less anything. However, most users prefer some sort of IDE (Integrated Development Environment) in order to get convenenience features like syntax highlighting and code completion. At this stage, code is most often run interactively.</p>"},{"location":"learn/#content-publishing","title":"content publishing","text":"<p>It's no longer enough to produce some sort of report that can be emailed around. Today, people increasingly prefer interactive dashboards so that consumers can choose to see the insight being presented in a variety of ways or perhaps drill down deeper into the information to gain a different perspective. To accomplish this, an extension package for R called \"shiny\" is most commonly used. Web-apps written with the Shiny framework -- commonly referred to as \"Shiny apps\" -- can be published in a number of ways, but are typically deployed to a server on the network so that users can access them via the web or intranet.</p>"},{"location":"learn/#unattended-code-execution","title":"Unattended code execution","text":"<p>Also referred to as \"batch execution\", this is perhaps the oldest method for running R in production. An R script is written that can be run from the command line.  The script could be analysing some data and producing a chart, extracting data from a database and enriching it with data from outher sources, or any number of other things. These command line scripts could be submitted to a HPC cluster, run as part of a DAG or perhaps scheduled to run at a specific time.</p>"},{"location":"learn/#extension-package-management","title":"Extension package management","text":"<p>Extension packages, usually just referred to as packages, are the life-blood of the R ecosystem. The R Project maintains an online package repository called CRAN (modelled after Perl's CPAN, but usually pronounced as a single word, \"kran\", rather than two as in \"cee-ran\"). Since packages are the best way to share re-usable code, users will often write their own extension packages either to use themselves, or perhaps for use within an organisation, without the intent for wider publication on CRAN itself.</p>"},{"location":"learn/code-exec/","title":"Unattended code execution","text":"<p>UAC, sometimes called \"batch execution\" is perhaps the earliest method for running R in production.</p> <ul> <li>Batch jobs (single or DAG based) eg. ETL</li> <li>Scheduling</li> <li>HPC</li> <li>Shell scripts</li> <li>CI/CD - git-backed, DAG execution</li> </ul>"},{"location":"learn/dev-envs/","title":"Development environments","text":"<p>The most common way to provide an IDE is to let your developers/data scientists use whatever IDE they want on a their laptop or desktop computer.</p> <p>This a good way to provide an IDE but it can be complex to manage in large scale enterprise deployments due to the sheer proliferation on options. Keeping an enterprise software catalogue up to date with IDE updates and underlying language revisions can also be problematic.</p> <p>In situations where you\u2019re working with large amounts on enterprise data, for example in a data a warehouse, you may find users are pulling lots of data a cross the network in order to analyse it. This can be especially problematic in environments where many users are working remotely and it could result in users pulling large amounts of data scross the corporate VPN which can be extremely slow and inefficient. One way to combat this is to move the compute closer to the data  -- essentially the same data centre -- by providing your developers with a means to developer code on a remote server. This could be via a local IDE (such as using the ssh plugin for bscode), at the command line via ssh, or via a web interface.</p> <p>It's also worth knowing that using multiple R versions can be tricky desktop/laptop environment but may be desirable, especially if your developers need to maintain older code.</p>"},{"location":"learn/docker/","title":"R and Docker","text":"<p>Docker is a special case...</p>"},{"location":"learn/packages/","title":"Packages","text":"<p>R defaults to getting packages from CRAN. For the most part, this is fine, however it can pose some quite specific problems in production deployments:</p> <ul> <li>No Linux binaries</li> <li>No easy way of installing old package sets without external packages</li> <li>No date based snapshotting</li> <li>Can\u2019t publish your own packages</li> <li>Need to accept all 21,000 packages</li> </ul> <p>In addition, users often end up with workflows that involve installing development versions of packages, or pacakges that are not published on CRAN for whatever reason directly from GitHub.</p>"},{"location":"learn/publishing/","title":"Publishing R bases assets","text":"<p>When it comes to deploying your production code, you need to match the type of code with the deployment environment:</p> <ul> <li>Shiny apps - interactive web applications</li> <li>Plumber apis</li> <li>Rmarkdown/Quarto reports</li> </ul>"},{"location":"learn/understanding-ds/","title":"Understanding Data Science","text":"<p>From the outside, the work of a data scientist can appear to be very similar to software development. A data scientist will write code, use an IDE and store their code in version control. However, it's important to recognise the differences as they drive much of the design and associated processes required for writing R in production environments.</p> <p>R users write software to analyse data, but the primary output of data science is insight and knowledge. This is in contrast to software development, where the primary output is software.</p> <p>A software developer must ensure that the software they write operates as intended. It must perform its intended funtion time and again with an appropriate user experience and performance characteristics to the task at hand.</p> <p>Conversely, a data scientist  might only run the software they write once, in order to produce the required insight. What's most important here is ensuring the methodological correctness and statistical rigor of the insight they produce and as a result, the code that is written is a secondary concern.</p> <p>This might also mean the testing is limited, or perhaps omitted altogether, and might be very different to the types of testing you're accustomed to in the software testing sphere. Testing might focus exclusively on the methodologies used and ensuring they've been correctly implemented, rather than in attempting to find bugs, edge cases, or deviations from requirements. In fact there might neot even be any requirements.</p> <p>Of course this there can be substantial overlap, especially where data scientists might get involved in extension package development or writing apps to present the insight they have produced for consumption by others.</p> <p>Think of data science as you might any other science. It's inherently exploratory in nature as data is probed and examined before a scientist starts to use the tools available to them to tease new knowledge from the data that is their subject matter.</p>"},{"location":"blog/archive/2019/","title":"2019","text":""},{"location":"blog/category/slides/","title":"slides","text":""},{"location":"blog/category/talks/","title":"talks","text":""}]}